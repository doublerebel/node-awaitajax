// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var Ajax, awaitAjax, extend, iced, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  Ajax = require("./ajax");

  extend = function() {
    var key, source, sources, target, val, _i, _len;
    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      source = sources[_i];
      for (key in source) {
        val = source[key];
        target[key] = val;
      }
    }
    return target;
  };

  awaitAjax = {
    awaitAjax: function(options, cb, queue) {
      var data, q, rv, status, statusText, xhr, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (queue == null) {
        queue = false;
      }
      rv = new iced.Rendezvous();
      options.success = rv.id('success').defer({
        assign_fn: (function(_this) {
          return function() {
            return function() {
              data = arguments[0];
              statusText = arguments[1];
              return xhr = arguments[2];
            };
          };
        })(this)(),
        lineno: 12,
        context: __iced_deferrals
      });
      options.error = rv.id('error').defer({
        assign_fn: (function(_this) {
          return function() {
            return function() {
              xhr = arguments[0];
              statusText = arguments[1];
              return data = arguments[2];
            };
          };
        })(this)(),
        lineno: 13,
        context: __iced_deferrals
      });
      q = new this.Q;
      if (queue) {
        q.ajaxQueue(options);
      } else {
        q.ajax(options);
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/charles/source/node-awaitajax/src/awaitajax.iced"
          });
          rv.wait(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return status = arguments[0];
              };
            })(),
            lineno: 19
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(status, xhr, statusText, data);
        };
      })(this));
    },
    awaitGet: function(options, cb, queue) {
      options.type = 'GET';
      return this.awaitAjax(options, cb, queue);
    },
    awaitPost: function(options, cb, queue) {
      options.type = 'POST';
      return this.awaitAjax(options, cb, queue);
    },
    awaitQueuedAjax: function(options, cb) {
      return this.awaitAjax(options, cb, true);
    },
    awaitQueuedGet: function(options, cb) {
      return this.awaitGet(options, cb, true);
    },
    awaitQueuedPost: function(options, cb) {
      return this.awaitPost(options, cb, true);
    }
  };

  module.exports = extend(Ajax, awaitAjax);

}).call(this);
