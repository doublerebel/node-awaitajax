// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var Ajax, Base, Pipeliner, extend, iced, najax, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  najax = require("najax");

  Pipeliner = require("iced-coffee-script/lib/coffee-script/icedlib").Pipeliner;

  extend = function() {
    var key, source, sources, target, val, _i, _len;
    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      source = sources[_i];
      for (key in source) {
        val = source[key];
        target[key] = val;
      }
    }
    return target;
  };

  Ajax = {
    getURL: function(object) {
      return object && (typeof object.url === "function" ? object.url() : void 0) || object.url;
    },
    enabled: true,
    disable: function(callback) {
      var e;
      if (this.enabled) {
        this.enabled = false;
        try {
          return callback();
        } catch (_error) {
          e = _error;
          throw e;
        } finally {
          this.enabled = true;
        }
      } else {
        return callback();
      }
    },
    max: 100,
    throttle: 0,
    queue: function(request) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this.pipeliner || (this.pipeliner = new Pipeliner(this.max, this.throttle));
      if (!request) {
        return this.pipeliner.queue;
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/ajax.iced",
          funcname: "queue"
        });
        _this.pipeliner.waitInQueue(__iced_deferrals.defer({
          lineno: 33
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return request(_this.pipeliner.defer({
          lineno: 34,
          context: __iced_deferrals
        }));
      });
    },
    clearQueue: function() {
      this.pipeliner.queue = [];
      return this.pipeliner.n_out = 0;
    }
  };

  Base = (function() {
    function Base() {}

    Base.prototype.defaults = {
      contentType: 'application/json',
      dataType: 'json',
      processData: false,
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      }
    };

    Base.prototype.queue = Ajax.queue;

    Base.prototype.ajax = function(params, defaults) {
      return najax(this.ajaxSettings(params, defaults));
    };

    Base.prototype.ajaxQueue = function(params, defaults) {
      var data, defererror, defersuccess, error, request, rv, settings, statusText, xhr,
        _this = this;
      xhr = null;
      rv = new iced.Rendezvous;
      settings = this.ajaxSettings(params, defaults);
      defersuccess = settings.success;
      defererror = settings.error;
      settings.success = rv.id('success').defer({
        assign_fn: (function() {
          return function() {
            data = arguments[0];
            statusText = arguments[1];
            return xhr = arguments[2];
          };
        })(),
        lineno: 61,
        context: __iced_deferrals
      });
      settings.error = rv.id('error').defer({
        assign_fn: (function() {
          return function() {
            xhr = arguments[0];
            statusText = arguments[1];
            return error = arguments[2];
          };
        })(),
        lineno: 62,
        context: __iced_deferrals
      });
      request = function(next) {
        var status, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        xhr = new Ajax(settings);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/ajax.iced",
            funcname: "request"
          });
          rv.wait(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return status = arguments[0];
              };
            })(),
            lineno: 66
          }));
          __iced_deferrals._fulfill();
        })(function() {
          switch (status) {
            case 'success':
              defersuccess(data, statusText, xhr);
              break;
            case 'error':
              defererror(xhr, statusText, error);
          }
          return next();
        });
      };
      request.abort = function(statusText) {
        var index;
        if (xhr) {
          return xhr.abort(statusText);
        }
        index = this.queue().indexOf(request);
        if (index > -1) {
          this.queue().splice(index, 1);
        }
        if (Ajax.pipeliner) {
          Ajax.pipeliner.n_out--;
        }
        return request;
      };
      if (!Ajax.enabled) {
        return request;
      }
      this.queue(request);
      return request;
    };

    Base.prototype.ajaxSettings = function(params, defaults) {
      return extend({}, this.defaults, defaults, params);
    };

    return Base;

  })();

  Ajax.defaults = Base.prototype.defaults;

  Ajax.Q = Base;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Ajax;
  }

}).call(this);
